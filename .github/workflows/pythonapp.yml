name: Python application

on: [workflow_dispatch, push]

jobs:
  test:
    runs-on: ubuntu-latest
    container: docker/compose

    env:
      DOMAIN: backend
      SMTP_HOST: ""
      TRAEFIK_PUBLIC_NETWORK_IS_EXTERNAL: false
      INSTALL_DEV: true
      COMPOSE_DOCKER_CLI_BUILD: 1
      #DOCKER_BUILDKIT: 1
      #BUILDKIT_INLINE_CACHE: 1
      DOCKER_IMAGE_BACKEND: eu.gcr.io/no-cookie-analytics/nca-backend
      DOCKER_IMAGE_FRONTEND: eu.gcr.io/no-cookie-analytics/nca-frontend
      DOCKER_IMAGE_FRONTEND_BUILD_STAGE: eu.gcr.io/no-cookie-analytics/nca-frontend-build-stage

    steps:
    - name: Install git
      run: |
        apk add --no-cache openssh-client git-lfs python3
        git lfs install

    - name: Create SSH key
      run: |
        mkdir -p ~/.ssh
        ssh-keyscan gitlab.com >> /etc/ssh/ssh_known_hosts
        ssh-agent -a $SSH_AUTH_SOCK > /dev/null
        echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
      env:
        SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        SSH_PRIVATE_KEY: ${{secrets.SSH_PRIVATE_KEY}}

    - uses: actions/checkout@v2
      env:
        SSH_AUTH_SOCK: /tmp/ssh_agent.sock

    - name: LFS pull
      run: |
        git lfs pull
      env:
        SSH_AUTH_SOCK: /tmp/ssh_agent.sock

    - name: Setup env file
      run: |
        mv .env-ci .env
        echo "TAG=$GITHUB_SHA" | sed 's|/|-|g' >> .env
        echo "BRANCH_TAG=$(echo $GITHUB_REF | sed 's|/|-|g')" >> .env

    - uses: google-github-actions/setup-gcloud@master
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        export_default_credentials: true

    - name: Create docker stack
      run: |
        docker-compose \
        -f docker-compose.yml \
        config > docker-stack.yml

    - name: Docker login
      run: |
        gcloud auth configure-docker

    - name: Pull docker cache
      run: |
        export BRANCH_TAG=$(echo "$GITHUB_REF" | sed 's|/|-|g')
        docker-compose pull db flower pgadmin queue proxy &
        docker pull $DOCKER_IMAGE_BACKEND:$BRANCH_TAG&
        docker pull $DOCKER_IMAGE_FRONTEND:$BRANCH_TAG&
        docker pull $DOCKER_IMAGE_BACKEND:master&
        docker pull $DOCKER_IMAGE_FRONTEND:master&
        docker pull $DOCKER_IMAGE_FRONTEND_BUILD_STAGE:$BRANCH_TAG&
        docker pull $DOCKER_IMAGE_FRONTEND_BUILD_STAGE:master&
        wait

    - name: Build docker images
      run: |
        export BRANCH_TAG=$(echo "$GITHUB_REF" | sed 's|/|-|g')
        docker build backend/ --progress=plain -t $DOCKER_IMAGE_BACKEND:$GITHUB_SHA --cache-from $DOCKER_IMAGE_BACKEND:$BRANCH_TAG --cache-from $DOCKER_IMAGE_BACKEND:master --build-arg INSTALL_DEV=true &
        docker build frontend/ --progress=plain --target build-stage -t $DOCKER_IMAGE_FRONTEND_BUILD_STAGE:$GITHUB_SHA --cache-from $DOCKER_IMAGE_FRONTEND_BUILD_STAGE:$BRANCH_TAG --cache-from $DOCKER_IMAGE_FRONTEND_BUILD_STAGE:master --build-arg INSTALL_DEV=true
        docker build frontend/ --progress=plain -t $DOCKER_IMAGE_FRONTEND:$GITHUB_SHA --cache-from $DOCKER_IMAGE_FRONTEND_BUILD_STAGE:$GITHUB_SHA --cache-from $DOCKER_IMAGE_FRONTEND:$BRANCH_TAG --cache-from $DOCKER_IMAGE_FRONTEND:master --build-arg INSTALL_DEV=true &
        wait

    - name: Push docker
      run: |
        docker image ls
        export BRANCH_TAG=$(echo "$GITHUB_REF" | sed 's|/|-|g')
        docker tag $DOCKER_IMAGE_BACKEND:$GITHUB_SHA $DOCKER_IMAGE_BACKEND:$BRANCH_TAG
        docker tag $DOCKER_IMAGE_FRONTEND:$GITHUB_SHA $DOCKER_IMAGE_FRONTEND:$BRANCH_TAG
        docker tag $DOCKER_IMAGE_FRONTEND_BUILD_STAGE:$GITHUB_SHA $DOCKER_IMAGE_FRONTEND_BUILD_STAGE:$BRANCH_TAG
        docker push $DOCKER_IMAGE_BACKEND:$BRANCH_TAG&
        docker push $DOCKER_IMAGE_FRONTEND:$BRANCH_TAG&
        docker push $DOCKER_IMAGE_FRONTEND_BUILD_STAGE:$BRANCH_TAG&
        wait

    - name: Start docker
      run: |
        docker-compose -f docker-stack.yml up -d

    - name: Run tests
      run: |
        docker-compose -f docker-stack.yml exec -T backend bash /app/tests-start.sh --cov=app "$@"

    - name: Log docker status
      if: ${{ always() }}
      run: |
        docker-compose logs -t
