/* tslint:disable */
/* eslint-disable */
/**
 * No Cookie Analytics
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AnalyticsData } from '../models';
// @ts-ignore
import { AnalyticsType } from '../models';
// @ts-ignore
import { HTTPValidationError } from '../models';
/**
 * AnalyticsApi - axios parameter creator
 * @export
 */
export const AnalyticsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get Analytics
         * @param {string} domainName 
         * @param {Array<AnalyticsType>} include To include multiple fields in result use &#x60;include&#x3D;&#x60; multiple times, eg: &#x60;&amp;include&#x3D;pageviews&amp;include&#x3D;countries&#x60;
         * @param {string} [page] 
         * @param {string} [country] 
         * @param {string} [browser] 
         * @param {string} [os] 
         * @param {string} [device] 
         * @param {string} [referrerName] 
         * @param {string} [start] 
         * @param {string} [end] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAnalytics: async (domainName: string, include: Array<AnalyticsType>, page?: string, country?: string, browser?: string, os?: string, device?: string, referrerName?: string, start?: string, end?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'domainName' is not null or undefined
            assertParamExists('getAnalytics', 'domainName', domainName)
            // verify required parameter 'include' is not null or undefined
            assertParamExists('getAnalytics', 'include', include)
            const localVarPath = `/api/v1/a/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)

            if (domainName !== undefined) {
                localVarQueryParameter['domain_name'] = domainName;
            }

            if (include) {
                localVarQueryParameter['include'] = include;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (country !== undefined) {
                localVarQueryParameter['country'] = country;
            }

            if (browser !== undefined) {
                localVarQueryParameter['browser'] = browser;
            }

            if (os !== undefined) {
                localVarQueryParameter['os'] = os;
            }

            if (device !== undefined) {
                localVarQueryParameter['device'] = device;
            }

            if (referrerName !== undefined) {
                localVarQueryParameter['referrer_name'] = referrerName;
            }

            if (start !== undefined) {
                localVarQueryParameter['start'] = (start as any instanceof Date) ?
                    (start as any).toISOString() :
                    start;
            }

            if (end !== undefined) {
                localVarQueryParameter['end'] = (end as any instanceof Date) ?
                    (end as any).toISOString() :
                    end;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AnalyticsApi - functional programming interface
 * @export
 */
export const AnalyticsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AnalyticsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get Analytics
         * @param {string} domainName 
         * @param {Array<AnalyticsType>} include To include multiple fields in result use &#x60;include&#x3D;&#x60; multiple times, eg: &#x60;&amp;include&#x3D;pageviews&amp;include&#x3D;countries&#x60;
         * @param {string} [page] 
         * @param {string} [country] 
         * @param {string} [browser] 
         * @param {string} [os] 
         * @param {string} [device] 
         * @param {string} [referrerName] 
         * @param {string} [start] 
         * @param {string} [end] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAnalytics(domainName: string, include: Array<AnalyticsType>, page?: string, country?: string, browser?: string, os?: string, device?: string, referrerName?: string, start?: string, end?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AnalyticsData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAnalytics(domainName, include, page, country, browser, os, device, referrerName, start, end, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AnalyticsApi - factory interface
 * @export
 */
export const AnalyticsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AnalyticsApiFp(configuration)
    return {
        /**
         * 
         * @summary Get Analytics
         * @param {string} domainName 
         * @param {Array<AnalyticsType>} include To include multiple fields in result use &#x60;include&#x3D;&#x60; multiple times, eg: &#x60;&amp;include&#x3D;pageviews&amp;include&#x3D;countries&#x60;
         * @param {string} [page] 
         * @param {string} [country] 
         * @param {string} [browser] 
         * @param {string} [os] 
         * @param {string} [device] 
         * @param {string} [referrerName] 
         * @param {string} [start] 
         * @param {string} [end] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAnalytics(domainName: string, include: Array<AnalyticsType>, page?: string, country?: string, browser?: string, os?: string, device?: string, referrerName?: string, start?: string, end?: string, options?: any): AxiosPromise<AnalyticsData> {
            return localVarFp.getAnalytics(domainName, include, page, country, browser, os, device, referrerName, start, end, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AnalyticsApi - interface
 * @export
 * @interface AnalyticsApi
 */
export interface AnalyticsApiInterface {
    /**
     * 
     * @summary Get Analytics
     * @param {string} domainName 
     * @param {Array<AnalyticsType>} include To include multiple fields in result use &#x60;include&#x3D;&#x60; multiple times, eg: &#x60;&amp;include&#x3D;pageviews&amp;include&#x3D;countries&#x60;
     * @param {string} [page] 
     * @param {string} [country] 
     * @param {string} [browser] 
     * @param {string} [os] 
     * @param {string} [device] 
     * @param {string} [referrerName] 
     * @param {string} [start] 
     * @param {string} [end] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApiInterface
     */
    getAnalytics(domainName: string, include: Array<AnalyticsType>, page?: string, country?: string, browser?: string, os?: string, device?: string, referrerName?: string, start?: string, end?: string, options?: any): AxiosPromise<AnalyticsData>;

}

/**
 * Request parameters for getAnalytics operation in AnalyticsApi.
 * @export
 * @interface AnalyticsApiGetAnalyticsRequest
 */
export interface AnalyticsApiGetAnalyticsRequest {
    /**
     * 
     * @type {string}
     * @memberof AnalyticsApiGetAnalytics
     */
    readonly domainName: string

    /**
     * To include multiple fields in result use &#x60;include&#x3D;&#x60; multiple times, eg: &#x60;&amp;include&#x3D;pageviews&amp;include&#x3D;countries&#x60;
     * @type {Array<AnalyticsType>}
     * @memberof AnalyticsApiGetAnalytics
     */
    readonly include: Array<AnalyticsType>

    /**
     * 
     * @type {string}
     * @memberof AnalyticsApiGetAnalytics
     */
    readonly page?: string

    /**
     * 
     * @type {string}
     * @memberof AnalyticsApiGetAnalytics
     */
    readonly country?: string

    /**
     * 
     * @type {string}
     * @memberof AnalyticsApiGetAnalytics
     */
    readonly browser?: string

    /**
     * 
     * @type {string}
     * @memberof AnalyticsApiGetAnalytics
     */
    readonly os?: string

    /**
     * 
     * @type {string}
     * @memberof AnalyticsApiGetAnalytics
     */
    readonly device?: string

    /**
     * 
     * @type {string}
     * @memberof AnalyticsApiGetAnalytics
     */
    readonly referrerName?: string

    /**
     * 
     * @type {string}
     * @memberof AnalyticsApiGetAnalytics
     */
    readonly start?: string

    /**
     * 
     * @type {string}
     * @memberof AnalyticsApiGetAnalytics
     */
    readonly end?: string
}

/**
 * AnalyticsApi - object-oriented interface
 * @export
 * @class AnalyticsApi
 * @extends {BaseAPI}
 */
export class AnalyticsApi extends BaseAPI implements AnalyticsApiInterface {
    /**
     * 
     * @summary Get Analytics
     * @param {AnalyticsApiGetAnalyticsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApi
     */
    public getAnalytics(requestParameters: AnalyticsApiGetAnalyticsRequest, options?: any) {
        return AnalyticsApiFp(this.configuration).getAnalytics(requestParameters.domainName, requestParameters.include, requestParameters.page, requestParameters.country, requestParameters.browser, requestParameters.os, requestParameters.device, requestParameters.referrerName, requestParameters.start, requestParameters.end, options).then((request) => request(this.axios, this.basePath));
    }
}
