"""initial migration (again)

Revision ID: 44042835f7cc
Revises: d4867f3a4c0a
Create Date: 2020-09-05 16:27:38.928637

"""
import sqlalchemy as sa
import sqlalchemy_enum34
from alembic import op
from sqlalchemy.dialects import postgresql

from app.models.event import EventTypeEnum

# revision identifiers, used by Alembic.
revision = "44042835f7cc"
down_revision = "d4867f3a4c0a"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "domain",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("domain_name", sa.String(), nullable=True),
        sa.Column("owner_id", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(["owner_id"], ["user.id"],),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_domain_domain_name"), "domain", ["domain_name"], unique=False
    )
    op.create_index(op.f("ix_domain_id"), "domain", ["id"], unique=False)
    op.create_table(
        "event",
        sa.Column("timestamp", sa.TIMESTAMP(), nullable=False),
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("domain_id", sa.Integer(), nullable=False),
        sa.Column("uid", sa.String(), nullable=True),
        sa.Column("raw_data", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column("event_type", EventTypeEnum, nullable=False),
        sa.Column("ua_string", sa.String(), nullable=True),
        sa.Column("path", sa.String(), nullable=True),
        sa.Column("url_params", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column("page_title", sa.String(), nullable=True),
        sa.Column("status_code", sa.Integer(), nullable=True),
        sa.Column("load_time_ms", sa.Integer(), nullable=True),
        sa.Column("page_size_bytes", sa.Integer(), nullable=True),
        sa.Column("referrer", sa.String(), nullable=True),
        sa.Column("user_timezone", sa.String(), nullable=True),
        sa.ForeignKeyConstraint(
            ["domain_id"], ["domain.id"], name="fk_event_domain_id"
        ),
        sa.PrimaryKeyConstraint("domain_id", "timestamp", "id"),
    )
    op.execute("SELECT create_hypertable('event', 'timestamp')")
    op.create_index(
        "ix_domain_timestamp", "event", ["domain_id", "timestamp"], unique=False
    )
    op.drop_index("ix_item_description", table_name="item")
    op.drop_index("ix_item_id", table_name="item")
    op.drop_index("ix_item_title", table_name="item")
    op.drop_table("item")
    op.alter_column("user", "email", existing_type=sa.VARCHAR(), nullable=False)
    op.alter_column(
        "user", "hashed_password", existing_type=sa.VARCHAR(), nullable=False
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column(
        "user", "hashed_password", existing_type=sa.VARCHAR(), nullable=True
    )
    op.alter_column("user", "email", existing_type=sa.VARCHAR(), nullable=True)
    op.create_table(
        "item",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("title", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("description", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("owner_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(["owner_id"], ["user.id"], name="item_owner_id_fkey"),
        sa.PrimaryKeyConstraint("id", name="item_pkey"),
    )
    op.create_index("ix_item_title", "item", ["title"], unique=False)
    op.create_index("ix_item_id", "item", ["id"], unique=False)
    op.create_index("ix_item_description", "item", ["description"], unique=False)
    op.drop_index("ix_domain_timestamp", table_name="event")
    op.drop_table("event")
    op.drop_index(op.f("ix_domain_id"), table_name="domain")
    op.drop_index(op.f("ix_domain_domain_name"), table_name="domain")
    op.drop_table("domain")
    # ### end Alembic commands ###
