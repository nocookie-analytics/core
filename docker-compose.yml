version: "3.6"
services:

  proxy:
    image: traefik:v2.2
    logging:
      driver: "local"
      options:
       max-size: "100k"
       max-file: "5"
    networks:
      - ${TRAEFIK_PUBLIC_NETWORK}
      - default
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command:
      # Enable Docker in Traefik, so that it reads labels from Docker services
      - --providers.docker
      # Add a constraint to only use services with the label for this stack
      # from the env var TRAEFIK_TAG
      - --providers.docker.constraints=Label(`traefik.constraint-label-stack`, `${TRAEFIK_TAG}`)
      # Do not expose all Docker services, only the ones explicitly exposed
      - --providers.docker.exposedbydefault=false
      # Enable Docker Swarm mode
      - --providers.docker.swarmmode
      # Enable the access log, with HTTP requests
      - --accesslog
      # Enable the Traefik log, for configurations and errors
      - --log
      # Enable the Dashboard and API
      - --api
      - "--entrypoints.web.address=:80"
      - "--entryPoints.web.forwardedHeaders.trustedIPs=127.0.0.1/32,10.0.0.0/8"
    deploy:
      placement:
        constraints:
          - node.role == manager
      labels:
        # Enable Traefik for this service, to make it available in the public network
        - traefik.enable=true
        # Use the traefik-public network (declared below)
        - traefik.docker.network=${TRAEFIK_PUBLIC_NETWORK}
        # Use the custom label "traefik.constraint-label=traefik-public"
        # This public Traefik will only use services with this label
        - traefik.constraint-label=${TRAEFIK_PUBLIC_TAG}
        # traefik-http set up only to use the middleware to redirect to https
        - traefik.http.middlewares.${STACK_NAME}-https-redirect.redirectscheme.scheme=https
        - traefik.http.middlewares.${STACK_NAME}-https-redirect.redirectscheme.permanent=true
        # Handle host with and without "www" to redirect to only one of them
        # Uses environment variable DOMAIN
        # To disable www redirection remove the Host() you want to discard, here and
        # below for HTTPS
        - traefik.http.routers.${STACK_NAME}-proxy-http.rule=Host(`${DOMAIN}`) || Host(`www.${DOMAIN}`)
        - traefik.http.routers.${STACK_NAME}-proxy-http.entrypoints=http
        # traefik-https the actual router using HTTPS
        - traefik.http.routers.${STACK_NAME}-proxy-https.rule=Host(`${DOMAIN}`) || Host(`www.${DOMAIN}`)
        - traefik.http.routers.${STACK_NAME}-proxy-https.entrypoints=https
        - traefik.http.routers.${STACK_NAME}-proxy-https.tls=true
        # Use the "le" (Let's Encrypt) resolver created below
        - traefik.http.routers.${STACK_NAME}-proxy-https.tls.certresolver=le
        # Define the port inside of the Docker service to use
        - traefik.http.services.${STACK_NAME}-proxy.loadbalancer.server.port=80
        # Handle domain with and without "www" to redirect to only one
        # To disable www redirection remove the next line
        - traefik.http.middlewares.${STACK_NAME}-www-redirect.redirectregex.regex=^https?://(www.)?(${DOMAIN})/(.*)
        # Redirect a domain with www to non-www
        # To disable it remove the next line
        - traefik.http.middlewares.${STACK_NAME}-www-redirect.redirectregex.replacement=https://${DOMAIN}/$${3}
        # Redirect a domain without www to www
        # To enable it remove the previous line and uncomment the next
        # - traefik.http.middlewares.${STACK_NAME}-www-redirect.redirectregex.replacement=https://www.${DOMAIN}/$${3}
        # Middleware to redirect www, to disable it remove the next line
        - traefik.http.routers.${STACK_NAME}-proxy-https.middlewares=${STACK_NAME}-www-redirect
        # Middleware to redirect www, and redirect HTTP to HTTPS
        # to disable www redirection remove the section: ${STACK_NAME}-www-redirect,
        - traefik.http.routers.${STACK_NAME}-proxy-http.middlewares=${STACK_NAME}-www-redirect,${STACK_NAME}-https-redirect

  db:
    # image: timescale/timescaledb:latest-pg12
    image: postgres:12
    volumes:
      - app-db-data:/var/lib/postgresql/data/pgdata
    env_file:
      - .env
    environment:
      - PGDATA=/var/lib/postgresql/data/pgdata
    deploy:
      replicas: ${DB_REPLICAS-1}
      placement:
        constraints:
          - node.labels.${STACK_NAME}.app-db-data == true

  backend:
    image: '${DOCKER_IMAGE_BACKEND}:${TAG-latest}'
    logging:
      driver: "local"
      options:
       max-size: "100k"
       max-file: "5"
    env_file:
      - .env
    environment:
      - SERVER_NAME=${DOMAIN}
      # Allow explicit env var override for tests
      - SMTP_HOST=${SMTP_HOST}
    build:
      context: ./backend
      cache_from:
        - '${DOCKER_IMAGE_BACKEND}:${BRANCH_TAG-latest}'
        - '${DOCKER_IMAGE_BACKEND}:master'
      args:
        BUILDKIT_INLINE_CACHE: 1
        INSTALL_DEV: ${INSTALL_DEV-false}
    deploy:
      replicas: 1
      update_config:
        parallelism: 1
        order: start-first
        failure_action: rollback
      restart_policy:
        window: 30s
        condition: on-failure
      labels:
        - traefik.enable=true
        - traefik.constraint-label-stack=${TRAEFIK_TAG}
        - traefik.http.routers.${STACK_NAME}-backend-http.rule=PathPrefix(`/api`) || PathPrefix(`/docs`) || PathPrefix(`/redoc`)
        - traefik.http.services.${STACK_NAME}-backend.loadbalancer.server.port=80
    volumes:
      - root-home:/root/

  frontend:
    image: '${DOCKER_IMAGE_FRONTEND}:${TAG-latest}'
    logging:
      driver: "local"
      options:
       max-size: "100k"
       max-file: "5"
    build:
      cache_from:
        - '${DOCKER_IMAGE_FRONTEND}:${BRANCH_TAG-latest}'
        - '${DOCKER_IMAGE_FRONTEND}:master'
      context: ./frontend
      args:
        FRONTEND_ENV: ${FRONTEND_ENV-production}
        BUILDKIT_INLINE_CACHE: 1
    deploy:
      replicas: 1
      update_config:
        parallelism: 1
        order: start-first
        failure_action: rollback
      restart_policy:
        window: 30s
        condition: on-failure
      labels:
        - traefik.enable=true
        - traefik.constraint-label-stack=${TRAEFIK_TAG}
        - traefik.http.routers.${STACK_NAME}-frontend-http.rule=PathPrefix(`/`)
        - traefik.http.services.${STACK_NAME}-frontend.loadbalancer.server.port=80

volumes:
  app-db-data:
  root-home:

networks:
  traefik-public:
    # Allow setting it to false for testing
    external: ${TRAEFIK_PUBLIC_NETWORK_IS_EXTERNAL-true}
